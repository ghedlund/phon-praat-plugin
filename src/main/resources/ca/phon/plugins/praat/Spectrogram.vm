# Spectrogram.vm
#
# Author: Greg J. Hedlund <ghedlund@mun.ca>
#
# Velocity template for obtaining spectrgram data for a given interval.
# Data is formatted as a JSON object and sent to Phon using the
# provided sock address.
#
# Required Arguments:
#  - recordId: The uuid of the phon record
#  - tierName: The TextGrid tier
#  - interval: The TextGrid interval
#  - intervalIdx: The interval index
#  - soundFile: The location of the large sound file
#  - interval: interval start/end times
#  - tempFile: location of temporary JSON data
#  - phonsock: <URL>:<PORT> for sending result
#	Params:
#	 - windowLength
#	 - maxFreq
#	 - timeStep
#	 - freqStep
#	 - windowShape

# BEGIN PARAMS #
# [
#	{
#		"name": "windowLength",
#		"label": "Window Length (s)",
#		"prompt": "",
#		"type": "java.lang.Float",
#		"default": 0.005
#	},
#	{
#		"name": "maxFreq",
#		"label": "Maximum Frequency (Hz)",
#		"prompt": "",
#		"type": "java.lang.Integer",
#		"default": 5000
#	},
#	{
#		"name": "timeStep",
#		"label": "Time Step (s)",
#		"prompt": "",
#		"type": "java.lang.Float",
#		"default": 0.002
#	},
#	{
#		"name": "freqStep",
#		"label": "Frequency Step (Hz)",
#		"prompt": "",
#		"type": "java.lang.Integer",
#		"default": 20
#	},
#	{
#		"name": "windowShape",
#		"label": "Window Shape",
#		"type": "java.lang.String",
#		"options": [ "square (rectangular)", "Hamming (raised sine-squared)",
#					 "Bartlett (triangular)", "Welch (parabolic)",
#					 "Hanning (sine-squared)", "Gaussian" ],
#		"default": "Gaussian"
#	}
# ]
# END PARAMS #

## Vars
sound$ = "$soundFile"
tempFile$ = "$tempFile"

# segment options
start = $interval.start
end = $interval.end
preserveTimes$ = "yes"

windowLength = $windowLength;
maxFreq = $maxFreq
timeStep = $timeStep
freqStep = $freqStep
windowShape$ = "$windowShape"

## Procedure
# open long sound
snd = Open long sound file... 'sound$'

# extract part
segment = Extract part... start end 'preserveTimes$'

# spectrogram
spectrogram = To Spectrogram... windowLength maxFreq timeStep freqStep 'windowShape$'

select spectrogram

startFreq = 0
endFreq = 5000

numBins = (endFreq - startFreq) / 31.25
numFrames = Get number of frames
specTimeStep = Get time step

# build our JSON return value
writeFileLine: tempFile$, "{"

# Add info for database keys
# record UUID
resultPrefix$ = """record"": ""$recordId""," + newline$
resultPrefix$ = resultPrefix$ + """documentType"": ""spectrogram""," + newline$

appendFileLine: tempFile$, resultPrefix$

# spectrum setup
spectrumSetup$ = """setup"": {" + newline$
spectrumSetup$ = spectrumSetup$ + """windowLength"":" + string$(windowLength) + ", " + newline$
spectrumSetup$ = spectrumSetup$ + """maxFreq"":" + string$(maxFreq) + ", " + newline$
spectrumSetup$ = spectrumSetup$ + """timeStep"":" + string$(timeStep) + ", " + newline$
spectrumSetup$ = spectrumSetup$ + """freqStep"":" + string$(freqStep) + ", " + newline$
spectrumSetup$ = spectrumSetup$ + """windowShape"": """ + windowShape$ + """" + newline$
spectrumSetup$ = spectrumSetup$ + "}, "

appendFileLine: tempFile$, spectrumSetup$

# spectrum [visualization] data info
spectrumInfo$ = """info"": {" + newline$
spectrumInfo$ = spectrumInfo$ + """start"": " + string$(start) + ", " + newline$
spectrumInfo$ = spectrumInfo$ + """end"": " + string$(end) + ", " + newline$
spectrumInfo$ = spectrumInfo$ + """numBins"": " + string$(numBins) + ", " + newline$
spectrumInfo$ = spectrumInfo$ + """freqStep"": 31.25, " + newline$
spectrumInfo$ = spectrumInfo$ + """numFrames"": " + string$(numFrames) + ", " + newline$
spectrumInfo$ = spectrumInfo$ + """timeStep"": " + string$(specTimeStep) + ", " + newline$


# build matrix
appendFileLine: tempFile$, """data"": ["

maxPower = 0.0

for frameNum from 1 to numFrames
	
	time = Get time from frame number... frameNum

	spectrumData$ = "["
	binFreq = startFreq;
	
	while binFreq <= endFreq
		
		power = Get power at... time binFreq
		
		if power = undefined
			power = 0
		endif
		maxPower = max(maxPower, power)
		
		p$ = string$(power)
		
		spectrumData$ = spectrumData$ + p$
		if binFreq < endFreq
			spectrumData$ = spectrumData$ + ", "
		endif
		
		binFreq = binFreq + 31.25
		
	endwhile
	
	spectrumData$ = spectrumData$ + "]"
	
	if frameNum < numFrames
		spectrumData$ = spectrumData$ + ","
	endif
	
	appendFileLine: tempFile$, spectrumData$

endfor

appendFileLine: tempFile$, "],"

mp$ = string$(maxPower)
if mp$ = "--undefined--"
	mp$ = """--undefined--"""
endif

spectrumInfo$ = spectrumInfo$ + """max"":" + mp$ + newline$
spectrumInfo$ = spectrumInfo$ + "}" + newline$

appendFileLine: tempFile$, spectrumInfo$, "}"

## Send data back to Phon
result$ = readFile$: tempFile$
sendsocket $phonsock 'result$'

# Cleanup
select snd
plus segment
plus spectrogram
Remove
